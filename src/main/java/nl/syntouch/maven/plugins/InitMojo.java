package nl.syntouch.maven.plugins;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.maven.artifact.Artifact;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.codehaus.plexus.util.FileUtils;

import java.beans.XMLEncoder;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

@Mojo(name = "init", defaultPhase = LifecyclePhase.INITIALIZE)
public class InitMojo extends AbstractTibcoMojo {

    public void execute() throws MojoExecutionException, MojoFailureException {
        createBuildDirectory();
        if (getMavenProject().getDependencyArtifacts().size() > 0) {
            generateAliasLibrary();
            generateDesignTimeLibraries();
            updateDesignerPrefs();
        }
    }

    private void createBuildDirectory() {
        File buildDirectory = new File(getMavenProject().getBuild().getDirectory());
        buildDirectory.mkdirs();
    }

    private void generateAliasLibrary() throws MojoExecutionException {
        PrintWriter printWriter = null;
        try {
            ArrayList<HashMap> fileAliasList = new ArrayList<HashMap>();
            Boolean createAliasLib = false;
            for (Artifact artifact : getMavenProject().getDependencyArtifacts()) {
                if (!artifact.getType().equals("projlib")) {
                    HashMap fileAlias = new HashMap();
                    fileAlias.put("isClasspathFile", Boolean.valueOf(true));
                    fileAlias.put("includeInDeployment", Boolean.valueOf(true));
                    fileAlias.put("name", artifact.getFile().getName());
                    fileAliasList.add(fileAlias);
                    createAliasLib = true;
                }
            }
            if (createAliasLib) {
                getLog().info("Generating Alias Library " + getAliasLibrary().getAbsolutePath());

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                XMLEncoder xmlEncoder = new XMLEncoder(baos);
                xmlEncoder.writeObject(fileAliasList);
                xmlEncoder.close();
                String xml = StringEscapeUtils.escapeXml(baos.toString());

                printWriter = new PrintWriter(new File(getProjectDirectory(), getAliasLibrary().getName()));
                printWriter.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                printWriter.println("<Repository:repository xmlns:Repository=\"http://www.tibco.com/xmlns/repo/types/2002\">");
                printWriter.println("<name name=\"AliasLibrary\">");
                printWriter.println("<FILE_ALIASES_LIST>" + xml);
                printWriter.println("</FILE_ALIASES_LIST>");
                printWriter.println("<description>Generated By Maven</description>");
                printWriter.println("</name>");
                printWriter.println("</Repository:repository>");
            }
        } catch (FileNotFoundException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } catch (IOException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } finally {
            if (printWriter != null) {
                printWriter.close();
            }
        }
    }

    private void generateDesignTimeLibraries() throws MojoExecutionException {
        PrintWriter printWriter = null;
        try {
            java.util.Date date = new java.util.Date();
            File designTimeLibs = new File(getProjectDirectory(), ".designtimelibs");
            getLog().info("Generating designtimelibs " + designTimeLibs);
            printWriter = new PrintWriter(new FileOutputStream(designTimeLibs, false));
            printWriter.println("#Design time libraries");
            printWriter.println("#Format: #=File Alias=Description");
            printWriter.println("#" + date);
            Integer i = 0;
            for (Artifact artifact : getMavenProject().getDependencyArtifacts()) {
                if (artifact.getType().equals("projlib")) {
                    printWriter.println(i + "=" + artifact.getArtifactId() + "-" + artifact.getVersion() + "." + artifact.getType() + "\\=");
                    i++;
                }
            }
            printWriter.close();
        } catch (FileNotFoundException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } finally {
            if (printWriter != null) {
                printWriter.close();
            }
        }

    }

    private void updateDesignerPrefs() throws MojoExecutionException {
        File designerPrefs;
        if (getDesignerPrefs() == null) {
            designerPrefs = new File(System.getProperty("user.home"), ".TIBCO/Designer5.prefs");
        } else {
            designerPrefs = getDesignerPrefs();
        }
        getLog().info("Updating designerPrefs " + designerPrefs.getAbsolutePath());
        removeFileAliasFromDesignerPrefs(designerPrefs);
        PrintWriter printWriter = null;
        try {
            printWriter = new PrintWriter(new FileOutputStream(designerPrefs, true));
            Integer i = 0;

            for (Artifact artifact : getMavenProject().getDependencyArtifacts()) {
                if (artifact.getType().equals("projlib")) {
                    printWriter.println(getFileAlias(artifact, i));
                    i++;
                }
            }
        } catch (IOException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } finally {
            if (printWriter != null) {
                printWriter.close();
            }
        }
    }

    private void removeFileAliasFromDesignerPrefs(File designerPrefs) throws MojoExecutionException {
        BufferedReader br = null;
        PrintWriter printWriter = null;
        try {
            File designerPrefsTmp = new File(getMavenProject().getBuild().getDirectory(), "Designer5.prefs");
            br = new BufferedReader(new FileReader(designerPrefs));
            printWriter = new PrintWriter(new FileWriter(designerPrefsTmp));
            String line;
            while ((line = br.readLine()) != null) {

                if (!line.startsWith("filealias.pref.")) {
                    printWriter.println(line);
                    printWriter.flush();
                }
            }
            printWriter.close();
            br.close();
            FileUtils.copyFileIfModified(designerPrefsTmp, designerPrefs);
        } catch (FileNotFoundException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } catch (IOException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        } finally {
            if (printWriter != null) {
                printWriter.close();
            }
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
